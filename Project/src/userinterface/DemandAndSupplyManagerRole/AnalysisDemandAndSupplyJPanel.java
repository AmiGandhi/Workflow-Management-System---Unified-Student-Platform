/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DemandAndSupplyManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.StudentOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AccomodationAssisstantManagerWorkRequest;
import Business.WorkQueue.AccomodationWorkRequest;
import Business.WorkQueue.BookstoreWorkRequest;
import Business.WorkQueue.HouseholdWorkRequest;
import java.awt.CardLayout;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Charmy
 */
public class AnalysisDemandAndSupplyJPanel extends javax.swing.JPanel {
private OrganizationDirectory directory;
    private JPanel userProcessContainer;
    private EcoSystem system;
    /**
     * Creates new form AnalysisDemandAndSupplyJPanel
     */
    public AnalysisDemandAndSupplyJPanel(JPanel userProcessContainer,EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.directory=directory;
        this.system=system;
        populateData();
        populateBookstoreData();
        populateHouseholdData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        accomodationTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookstoreTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        householdTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        accomodationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Sold by", "Bought by", "Network"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(accomodationTable);
        if (accomodationTable.getColumnModel().getColumnCount() > 0) {
            accomodationTable.getColumnModel().getColumn(0).setResizable(false);
            accomodationTable.getColumnModel().getColumn(1).setResizable(false);
            accomodationTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Accommodation Analysis");

        bookstoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Sold By", "Bought By", "Network"
            }
        ));
        jScrollPane2.setViewportView(bookstoreTable);

        householdTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Sold By", "Bought By", "Network"
            }
        ));
        jScrollPane3.setViewportView(householdTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Household Analysis");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("BookStore Analysis");

        btnBack.setBackground(new java.awt.Color(102, 102, 102));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("TRACK ANALYSIS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(404, 404, 404))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(212, 212, 212))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    public void populateData()
    {
        DefaultTableModel model = (DefaultTableModel) accomodationTable.getModel();
        
        model.setRowCount(0);
           for(Network network:system.getNetworkList())
     {
       for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
       {
           if(enterprise.getEnterpriseType()==Enterprise.EnterpriseType.Accomodation);
              {
                  for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                   {
                      if(organization instanceof StudentOrganization)
                          {
                            for(UserAccount userAccount1: organization.getUserAccountDirectory().getUserAccountList())
                            {
                                for (AccomodationWorkRequest request : userAccount1.getWorkQueue().getAccomodationWorkRequestList())
                                {
                                    if(request.getStatus().equalsIgnoreCase("Purchased"))
                                    {
                                                Object[] row = new Object[4];
                                                    row[0] = userAccount1.getUsername();
                                                    row[1] = request.getBuyerName();
                                                    row[2]=network;                         
                                                    model.addRow(row);
                                    }
                                }
                            }
                          }
                    }
              }
        }
    }
    }
    
    public void populateBookstoreData()
    {
        DefaultTableModel model = (DefaultTableModel) bookstoreTable.getModel();
        
        model.setRowCount(0);
           for(Network network:system.getNetworkList())
     {
       for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
       {
           if(enterprise.getEnterpriseType()==Enterprise.EnterpriseType.Bookstore);
              {
                  for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                   {
                      if(organization instanceof StudentOrganization)
                          {
                            for(UserAccount userAccount1: organization.getUserAccountDirectory().getUserAccountList())
                            {
                                for (BookstoreWorkRequest request : userAccount1.getWorkQueue().getBookstoreWorkRequestList())
                                {
                                    if(request.getStatus().equalsIgnoreCase("Purchased"))
                                    {
                                                Object[] row = new Object[4];
                                                    row[0] = userAccount1.getUsername();
                                                    row[1] = request.getBuyerName();
                                                    row[2]=network;                         
                                                    model.addRow(row);
                                    }
                                }
                            }
                          }
                    }
              }
        }
    }
    }
    
    public void populateHouseholdData()
    {
        DefaultTableModel model = (DefaultTableModel) householdTable.getModel();
        
        model.setRowCount(0);
        for(Network network:system.getNetworkList())
        {
          for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
          {
              if(enterprise.getEnterpriseType()==Enterprise.EnterpriseType.Household);
                 {
                     for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                      {
                         if(organization instanceof StudentOrganization)
                             {
                               for(UserAccount userAccount1: organization.getUserAccountDirectory().getUserAccountList())
                               {
                                   for (HouseholdWorkRequest request : userAccount1.getWorkQueue().getHouseholdWorkRequests())
                                   {
                                       if(request.getStatus().equalsIgnoreCase("Purchased"))
                                       {
                                                   Object[] row = new Object[4];
                                                       row[0] = userAccount1.getUsername();
                                                       row[1] = request.getBuyerName();
                                                       row[2]=network;                         
                                                       model.addRow(row);
                                       }
                                   }
                               }
                             }
                       }
                 }
           }
       }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accomodationTable;
    private javax.swing.JTable bookstoreTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JTable householdTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}


